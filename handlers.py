import uuid
import logging
import sqlite3
import random
import string
import urllib.parse

from aiogram import Router, Bot
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from py3xui import Client
from datetime import datetime, timezone, timedelta
from states import SubscriptionStates
from keyboards import (get_main_menu_kb, get_subscriptions_menu_kb,
                      get_settings_menu_kb, get_period_kb, get_manual_kb, get_terms_kb,
                      get_payment_confirm_kb, get_privacy_kb, get_connection_guide_button,
                       get_inline_manual_kb, get_info_keyboard, get_referral_choice_kb, get_referral_link_kb)
from database import (get_user, create_user, update_user_terms, get_trial_status,
                     create_trial_user, activate_trial, add_subscription_to_db,
                     add_payment_to_db, update_subscriptions_on_db, get_referrals,
                              apply_referral_bonus, has_been_referred)
from payments import create_payment_link, check_payment_status
from xui_utils import get_best_panel, get_api_by_name, get_active_subscriptions, extend_subscription

import manual_text as mt
import config as cfg

from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder, KeyboardButton
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton




router = Router()

def generate_sub(length=16):
    chars = string.ascii_lowercase + string.digits  # —Å—Ç—Ä–æ—á–Ω—ã–µ –±—É–∫–≤—ã + —Ü–∏—Ñ—Ä—ã
    return ''.join(random.choices(chars, k=length))

DEVICES = [
    {"name": "üíª –ü–ö", "callback": "setup_pc", "reply_name": "üíª –ü–ö", "download_url": "https://github.com/Ckr1tn1y/WSocks-VPN--NekoBox-/archive/refs/heads/main.zip"},
    {"name": "üì± Android", "callback": "setup_android", "reply_name": "üì± Android", "download_url": "https://play.google.com/store/apps/details?id=com.v2raytun.android"},
    {"name": "üì∫ Android TV", "callback": "setup_android_tv", "reply_name": "üì∫ Android TV", "download_url": "https://play.google.com/store/apps/details?id=com.google.android.videos"},
    {"name": "üçè iOS / MacOS", "callback": "setup_ios", "reply_name": "üçè iOS / MacOS", "download_url": "https://apps.apple.com/ru/app/v2raytun/id6476628951"}
]

@router.message(Command("start"))
async def send_welcome(message: Message, state: FSMContext, bot: Bot):
    tg_id = message.from_user.id
    args = message.text.split()
    referrer_id = int(args[1].split('_')[1]) if len(args) > 1 and args[1].startswith("ref_") else None


    user = await get_user(tg_id)
    if not user:
        if referrer_id and not await has_been_referred(tg_id):
            await create_user(tg_id, referrer_id)
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–æ–Ω—É—Å –¥–ª—è —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
            active_subs = get_active_subscriptions(referrer_id)  # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫–∏
            referrer_subs = [sub for sub in active_subs if "DE-FRA-TRIAL" not in sub['email']]  # –ó–∞—Ç–µ–º —Ñ–∏–ª—å—Ç—Ä—É–µ–º
            current_panel = get_best_panel()
            api = get_api_by_name(current_panel['name'])

            if not referrer_subs:  # –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫
                expiry_time = (datetime.now(timezone.utc) + timedelta(days=7)).strftime("%Y-%m-%d %H:%M:%S")
                email = f"DE-FRA-USER-{referrer_id}-{uuid.uuid4().hex[:6]}"
                subscription_id = generate_sub(16)
                new_client = Client(
                    id=str(uuid.uuid4()),
                    enable=True,
                    tg_id=referrer_id,
                    expiry_time=int(datetime.strptime(expiry_time, "%Y-%m-%d %H:%M:%S").timestamp() * 1000),
                    flow="xtls-rprx-vision",
                    email=email,
                    sub_id=subscription_id,
                    limit_ip=5
                )
                api.client.add(1, [new_client])
                await add_subscription_to_db(referrer_id, email, current_panel['name'], expiry_time)
                await apply_referral_bonus(referrer_id, tg_id)
                subscription_key = current_panel["create_key"](new_client)
                await bot.send_message(
                    referrer_id,
                    f"üéâ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ! –í–∞–º —Å–æ–∑–¥–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 7 –¥–Ω–µ–π:\n"
                    f"```\n"
                    f"{subscription_key}\n"
                    f"```",
                    parse_mode="MARKDOWN",
                    reply_markup=get_connection_guide_button()
                )
            elif len(referrer_subs) == 1:  # –û–¥–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
                sub = referrer_subs[0]
                api = get_api_by_name(sub['panel'])
                new_expiry = (datetime.now(timezone.utc) if sub['is_expired'] else sub['expiry_date']) + timedelta(days=7)
                extend_subscription(sub['email'], sub['id'], 7, referrer_id, sub['sub_id'], api)
                await update_subscriptions_on_db(sub['email'], new_expiry.strftime("%Y-%m-%d %H:%M:%S"))
                await apply_referral_bonus(referrer_id, tg_id)
                await bot.send_message(
                    referrer_id,
                    f"üéâ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ! –ü–æ–¥–ø–∏—Å–∫–∞ {sub['email']} –ø—Ä–æ–¥–ª–µ–Ω–∞ –Ω–∞ 7 –¥–Ω–µ–π –¥–æ {new_expiry.strftime('%Y-%m-%d')}."
                )
            else:  # –ù–µ—Å–∫–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫
                await bot.send_message(
                    referrer_id,
                    "üéâ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ! –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –Ω–∞ 7 –¥–Ω–µ–π:",
                    reply_markup=get_referral_choice_kb(referrer_subs, tg_id)
                )
                await state.update_data(referrer_id=referrer_id, referee_id=tg_id)
        else:
            await create_user(tg_id)
        user = await get_user(tg_id)

    if not user['accepted_terms']:
        await message.answer(f"{mt.license_agreement_text}", parse_mode="HTML", reply_markup=get_terms_kb())
        await state.set_state(SubscriptionStates.wait_for_accept)
    else:
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?", reply_markup=get_main_menu_kb())

@router.callback_query(lambda c: c.data.startswith("extend_ref_"))
async def handle_referral_choice(callback: CallbackQuery, bot: Bot):
    try:
        # –†–∞–∑–±–∏—Ä–∞–µ–º callback_data: extend_ref_<email>_<referee_id>
        parts = callback.data.split('_')
        email = callback.data.split("_")[2] # –°–æ–±–∏—Ä–∞–µ–º email –æ–±—Ä–∞—Ç–Ω–æ
        referee_id = int(parts[3])
        referrer_id = callback.from_user.id

        referrer_subs = get_active_subscriptions(referrer_id)
        sub = next((s for s in referrer_subs if s['email'] == email), None)
        if sub:
            api = get_api_by_name(sub['panel'])  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞–Ω–µ–ª—å –ø–æ–¥–ø–∏—Å–∫–∏
            new_expiry = (datetime.now(timezone.utc) if sub['is_expired'] else sub['expiry_date']) + timedelta(days=7)
            extend_subscription(sub['email'], sub['id'], 7, referrer_id, sub['sub_id'], api)
            await update_subscriptions_on_db(sub['email'], new_expiry.strftime("%Y-%m-%d %H:%M:%S"))
            await apply_referral_bonus(referrer_id, referee_id)
            await bot.send_message(referrer_id,
                                      f"üéâ –ü–æ–¥–ø–∏—Å–∫–∞ {sub['email']} –ø—Ä–æ–¥–ª–µ–Ω–∞ –Ω–∞ 7 –¥–Ω–µ–π –¥–æ {new_expiry.strftime('%Y-%m-%d')}.")
            await bot.answer_callback_query(callback.id)
            await bot.delete_message(chat_id=callback.message.chat.id, message_id=callback.message.message_id)


        else:
            await bot.answer_callback_query(callback.id, "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ handle_referral_choice: {e}")
        await bot.answer_callback_query(callback.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", show_alert=True)


@router.message(lambda message: message.text == "üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞")
async def show_referrals(message: Message):
    tg_id = message.from_user.id
    ref_link = f"t.me/{cfg.BOT_USERNAME}?start=ref_{tg_id}"
    rfr_lnk = f"https://t.me/share/url?url=https://t.me/{cfg.BOT_USERNAME}?start=ref_{tg_id}"

    await message.answer(
            f"\n–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –ø–æ —Å—Å—ã–ª–∫–µ –∏ –ø–æ–ª—É—á–∞–π—Ç–µ <b>7 –¥–Ω–µ–π</b> –ø–æ–¥–ø–∏—Å–∫–∏ –±–µ—Å–ø–ª–∞—Ç–Ω–æ:\n"
            f"<code>{ref_link}</code>\n"
            f"<i>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å</i>",
            reply_markup=get_referral_link_kb(rfr_lnk),
            parse_mode="HTML")

@router.callback_query(lambda c: c.data == "accept_terms", StateFilter(SubscriptionStates.wait_for_accept))
async def accept_terms(callback_query: CallbackQuery, state: FSMContext, bot: Bot):
    tg_id = callback_query.from_user.id
    await update_user_terms(tg_id, True)
    if not await get_user(tg_id):
        await create_user(tg_id)
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(tg_id, "‚úÖ –°–ø–∞—Å–∏–±–æ! –í—ã –ø—Ä–∏–Ω—è–ª–∏ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ. –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.", reply_markup=get_main_menu_kb())
    await state.clear()


@router.message(lambda message: message.text == "üéÅ –ü—Ä–æ–±–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞")
async def trial_subscription_handler(message: Message, bot: Bot):
    tg_id = message.from_user.id
    trial_status = await get_trial_status(tg_id)
    if trial_status is None:
        await create_trial_user(tg_id)
        trial_status = 0
    if trial_status == 1:
        await message.answer("–í—ã —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –ø—Ä–æ–±–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É. –û–Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑.")
        return
    expiry_time = (datetime.now(timezone.utc) + timedelta(days=3)).strftime("%Y-%m-%d %H:%M:%S")
    email = f"DE-FRA-TRIAL-{tg_id}"
    subscription_id = generate_sub(16)
    trial_client = Client(
        id=str(uuid.uuid4()),
        enable=True,
        tg_id=tg_id,
        expiry_time=int(datetime.strptime(expiry_time, "%Y-%m-%d %H:%M:%S").timestamp() * 1000),
        flow="xtls-rprx-vision",
        email=email,
        sub_id=subscription_id,
        limit_ip=1
    )
    current_panel = get_best_panel()
    api = get_api_by_name(current_panel['name'])
    try:
        await add_subscription_to_db(tg_id, email, current_panel['name'], expiry_time)
        api.client.add(1, [trial_client])
        trial_key = current_panel["create_key"](trial_client)
        await message.answer(
            f"‚úÖ –ü—Ä–æ–±–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!\n",
            parse_mode="HTML",
            reply_markup=get_main_menu_kb()
        )

        await  bot.send_message(
            message.from_user.id,
            f"üîë ***–ö–ª—é—á:***"
            f"```\n"
            f"{trial_key}\n"
            f"```",
            parse_mode="MARKDOWN",
            reply_markup=get_connection_guide_button()
        )
        await activate_trial(tg_id)
    except Exception as e:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–±–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.")
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–±–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏: {e}")

@router.message(lambda message: message.text in ["üìå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "üõí –ü–æ–¥–ø–∏—Å–∫–∏", "‚ù§Ô∏è –ß–∞—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π"])
async def open_submenu(message: Message, bot: Bot):
    if message.text == "üìå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è":
        await message.answer(
            "üìñ –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–∑–¥–µ–ª:",
            reply_markup=get_info_keyboard()
        )
    elif message.text == "üõí –ü–æ–¥–ø–∏—Å–∫–∏":
        tg_id = message.from_user.id
        subscriptions = get_active_subscriptions(tg_id)
        if subscriptions:
            response = ""
            for i, sub in enumerate(subscriptions, start=1):
                status = "‚ö†Ô∏è –°—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏ –∏—Å—Ç—ë–∫!" if sub['is_expired'] else "‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞."
                response += (
                    f"\n*–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ {i}:*\n"
                    f"üë§ ***–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:*** {sub['email']}\n"
                    f"üîë ***–ö–ª—é—á:***"
                    f"```\n"
                    f"{sub['key']}\n"
                    f"```"
                    f"‚è≥ ***–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è:*** {sub['expiry_date'].strftime('%Y-%m-%d %H:%M:%S')}\n\n"
                    f"{status}\n\n"
                )

            await bot.send_message(
                message.from_user.id,
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=get_subscriptions_menu_kb()
            )
            await message.reply(response, parse_mode="MARKDOWN", reply_markup=get_connection_guide_button())

        else:
            await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫.", reply_markup=get_subscriptions_menu_kb())
    elif message.text == "‚ù§Ô∏è –ß–∞—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π":
        support_text = ("–î–ª—è —Å–≤—è–∑–∏ —Å –Ω–∞—à–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—é–¥–∞, @WSocks_Support –∏ –Ω–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –æ—Ç–≤–µ—Ç–∏—Ç –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!\n\n"
                        f"–í–∞—à id –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º:üëâüèø<code>{message.from_user.id}</code>üëàüèø\n"
                        "<i>(–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ id —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å)</i>")
        await message.reply(support_text, reply_markup=get_main_menu_kb(), parse_mode="HTML")



@router.message(lambda message: message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def back_to_main(message: Message):
    await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu_kb())

@router.message(lambda message: message.text == "üí≥ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")
async def buy_subscription(message: Message, state: FSMContext):
    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏:", reply_markup=get_period_kb())
    await state.set_state(SubscriptionStates.choosing_buy_period)

@router.message(lambda message: message.text in ["30 –¥–Ω–µ–π", "90 –¥–Ω–µ–π", "180 –¥–Ω–µ–π", "360 –¥–Ω–µ–π"], StateFilter(SubscriptionStates.choosing_buy_period))
async def confirm_subscription_purchase(message: Message, state: FSMContext):
    try:
        days = int(message.text.split()[0])
        prices = {30: 89, 90: 249, 180: 449, 360: 849}
        amount = prices[days]
        tg_id = message.from_user.id
        label = f"{tg_id}-{uuid.uuid4().hex[:6]}"
        payment_link = create_payment_link(amount, label)
        await state.update_data(days=days, amount=amount, tg_id=tg_id, label=label)
        payment_message = await message.reply(
            f"–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ {days} –¥–Ω–µ–π: {amount} —Ä—É–±–ª–µ–π.\n\n"
            f"–î–ª—è –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>–û–ø–ª–∞—Ç–∏—Ç—å</b>, –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ <b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É</b>\n"
            f"–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –ø–ª–∞—Ç—ë–∂ –Ω–∞–∂–º–∏—Ç–µ <b>–û—Ç–º–µ–Ω–∞</b>",
            reply_markup=get_payment_confirm_kb(payment_link),
            parse_mode="HTML"
        )
        await state.update_data(payment_message_id=payment_message.message_id)
        await state.set_state(SubscriptionStates.awaiting_payment)
    except Exception as e:
        await message.reply(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        await state.clear()

@router.message(lambda message: message.text == "–ù–∞–∑–∞–¥", StateFilter(SubscriptionStates.choosing_buy_period))
async def cancel_subscription(message: Message, state: FSMContext):
    await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=get_main_menu_kb())
    await state.clear()

@router.callback_query(lambda c: c.data in ["confirm_payment", "cancel_payment"], StateFilter(SubscriptionStates.awaiting_payment))
async def handle_payment_action(callback_query: CallbackQuery, state: FSMContext, bot: Bot):
    data = await state.get_data()
    payment_message_id = data.get('payment_message_id')
    custom_label = data.get('label')
    days = data.get('days')
    tg_id = data.get('tg_id')
    amount = data.get('amount')
    current_panel = get_best_panel()
    api = get_api_by_name(current_panel['name'])
    if callback_query.data == "cancel_payment":
        if payment_message_id:
            await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=payment_message_id)
        await bot.send_message(callback_query.message.chat.id, "–û–ø–ª–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=get_main_menu_kb())
        await state.clear()
    elif callback_query.data == "confirm_payment":
        if check_payment_status(custom_label):
            if payment_message_id:
                await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=payment_message_id)
            expiry_time = (datetime.now(timezone.utc) + timedelta(days=days)).strftime("%Y-%m-%d %H:%M:%S")
            email = f"DE-FRA-USER-{tg_id}-{uuid.uuid4().hex[:6]}"
            subscription_id = generate_sub(16)
            new_client = Client(
                id=str(uuid.uuid4()),
                enable=True,
                tg_id=tg_id,
                expiry_time=int(datetime.strptime(expiry_time, "%Y-%m-%d %H:%M:%S").timestamp() * 1000),
                flow="xtls-rprx-vision",
                email=email,
                sub_id=subscription_id,
                limit_ip=5
            )
            api.client.add(1, [new_client])
            subscription_key = current_panel["create_key"](new_client)
            await add_subscription_to_db(tg_id, email, current_panel['name'], expiry_time)
            await add_payment_to_db(tg_id, custom_label, "–ø–æ–∫—É–ø–∫–∞", datetime.now(timezone.utc).strftime("%Y-%m-%d %H:%M:%S"), amount, email)
            await bot.send_message(
                callback_query.message.chat.id,
                f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞.",
                parse_mode="HTML",
                reply_markup=get_main_menu_kb()
            )

            await  bot.send_message(
                callback_query.message.chat.id,
                f"üë§ ***–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:*** {email}\n"
                f"üîë ***–ö–ª—é—á:***"
                f"```\n"
                f"{subscription_key}\n"
                f"```",
                parse_mode="MARKDOWN",
                reply_markup=get_connection_guide_button()
            )
            await state.clear()
        else:
            await bot.answer_callback_query(callback_query.id, "–û–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.", show_alert=True)


@router.message(lambda message: message.text == "üïë –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")
async def extend_subscription_menu(message: Message, state: FSMContext):
    tg_id = message.from_user.id
    subscriptions = get_active_subscriptions(tg_id)

    # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫–∏, –∏—Å–∫–ª—é—á–∞—è –ø—Ä–æ–±–Ω—ã–µ
    non_trial_subs = [sub for sub in subscriptions if sub['email'] != f"DE-FRA-TRIAL-{tg_id}"]

    if non_trial_subs:  # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–µ–ø—Ä–æ–±–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
        kb = ReplyKeyboardBuilder()
        for sub in non_trial_subs:
            kb.button(text=sub['email'])
        kb.button(text="–ù–∞–∑–∞–¥")
        kb.adjust(1)
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è:",
            reply_markup=kb.as_markup(resize_keyboard=True)
        )
        await state.set_state(SubscriptionStates.extending_subscription)
    else:  # –ï—Å–ª–∏ –Ω–µ—Ç –Ω–µ–ø—Ä–æ–±–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ (–∏–ª–∏ –ø–æ–¥–ø–∏—Å–æ–∫ –≤–æ–æ–±—â–µ)
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫.")

@router.message(StateFilter(SubscriptionStates.extending_subscription))
async def extend_selected_subscription(message: Message, state: FSMContext):
    email = message.text
    if email == "–ù–∞–∑–∞–¥":
        await state.clear()
        await message.reply("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=get_main_menu_kb())
        return
    tg_id = message.from_user.id
    subscriptions = get_active_subscriptions(tg_id)
    selected_sub = next((sub for sub in subscriptions if sub['email'] == email), None)
    if selected_sub:
        await state.update_data(selected_sub=selected_sub, panel_name=selected_sub['panel'])
        await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏:", reply_markup=get_period_kb())
        await state.set_state(SubscriptionStates.choosing_extend_period)
    else:
        await message.reply("–í—ã–±—Ä–∞–Ω–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=get_main_menu_kb())
        await state.clear()

@router.message(lambda message: message.text in ["30 –¥–Ω–µ–π", "90 –¥–Ω–µ–π", "180 –¥–Ω–µ–π", "360 –¥–Ω–µ–π"], StateFilter(SubscriptionStates.choosing_extend_period))
async def confirm_extension_purchase(message: Message, state: FSMContext, bot: Bot):
    days = int(message.text.split()[0])
    prices = {30: 89, 90: 249, 180: 449, 360: 849}
    amount = prices[days]
    tg_id = message.from_user.id
    label = f"EXTEND-{tg_id}-{uuid.uuid4().hex[:6]}"
    payment_link = create_payment_link(amount, label)
    await state.update_data(days=days, amount=amount, tg_id=tg_id, label=label)
    payment_message = await message.reply(
        f"–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ {days} –¥–Ω–µ–π: {amount} —Ä—É–±–ª–µ–π.\n\n"
            f"–î–ª—è –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>–û–ø–ª–∞—Ç–∏—Ç—å</b>, –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ <b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É</b>\n"
            f"–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –ø–ª–∞—Ç—ë–∂ –Ω–∞–∂–º–∏—Ç–µ <b>–û—Ç–º–µ–Ω–∞</b>",
            reply_markup=get_payment_confirm_kb(payment_link),
            parse_mode="HTML"
    )
    await state.update_data(payment_message_id=payment_message.message_id)
    await state.set_state(SubscriptionStates.awaiting_extend_payment)

@router.message(lambda message: message.text == "–ù–∞–∑–∞–¥", StateFilter(SubscriptionStates.choosing_extend_period))
async def cancel_subscription(message: Message, state: FSMContext):
    await message.reply("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=get_main_menu_kb())
    await state.clear()

@router.callback_query(lambda c: c.data in ["confirm_payment", "cancel_payment"], StateFilter(SubscriptionStates.awaiting_extend_payment))
async def handle_extension_payment_action(callback_query: CallbackQuery, state: FSMContext, bot: Bot):
    data = await state.get_data()
    payment_message_id = data.get('payment_message_id')
    custom_label = "1615487633"  #data.get('label')
    days = data.get('days')
    tg_id = data.get('tg_id')
    selected_sub = data.get('selected_sub')
    amount = data.get('amount')
    current_panel = data.get("panel_name")
    api = get_api_by_name(current_panel)
    if callback_query.data == "cancel_payment":
        if payment_message_id:
            await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=payment_message_id)
        await bot.send_message(callback_query.message.chat.id, "–ü—Ä–æ–¥–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_main_menu_kb())
        await state.clear()
    elif callback_query.data == "confirm_payment":
        if check_payment_status(custom_label):
            if payment_message_id:
                await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=payment_message_id)
            inbounds = api.inbound.get_list()
            for inbound in inbounds:
                for client in inbound.settings.clients:
                    if client.email == selected_sub['email'] and client.tg_id == tg_id:
                        extend_subscription(selected_sub['email'], client.id, days, tg_id, client.sub_id, api)
                        current_expiry = selected_sub["expiry_date"]
                        new_expiry = current_expiry + timedelta(days=days)
                        await update_subscriptions_on_db(selected_sub['email'], new_expiry.strftime("%Y-%m-%d %H:%M:%S"))
                        await add_payment_to_db(tg_id, custom_label, "–ø—Ä–æ–¥–ª–µ–Ω–∏–µ", datetime.now(timezone.utc).strftime("%Y-%m-%d %H:%M:%S"), amount, selected_sub['email'])
                        await bot.send_message(
                            callback_query.message.chat.id,
                            f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –ü–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞ –Ω–∞ {days} –¥–Ω–µ–π.\n"
                            f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: </b> {client.email}\n"
                            f"‚è≥ <em><b>–ù–æ–≤–∞—è –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: </b></em> {new_expiry.strftime('%Y-%m-%d %H:%M:%S')}",
                            parse_mode="HTML",
                            reply_markup=get_main_menu_kb()
                        )
                        await state.clear()
                        return
        else:
            await bot.answer_callback_query(callback_query.id, "–û–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)

@router.callback_query(lambda c: c.data == "show_setup_menu")
async def show_setup_menu(callback_query: CallbackQuery, bot: Bot, state: FSMContext):
    tg_id = callback_query.from_user.id
    subscriptions = get_active_subscriptions(tg_id)

    if not subscriptions:
        await bot.send_message(
            chat_id=callback_query.message.chat.id,
            text="–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π.",
            reply_markup=get_main_menu_kb()
        )
        await callback_query.answer()
        return

    if len(subscriptions) == 1:
        # –û–¥–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ ‚Äî —Å—Ä–∞–∑—É –≤—ã–±–æ—Ä —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        sub_key = subscriptions[0]["key"]
        await state.update_data(selected_sub=sub_key)
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=device["name"], callback_data=device["callback"])]
            for device in DEVICES
        ])
        await bot.send_message(
            chat_id=callback_query.message.chat.id,
            text="–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:",
            reply_markup=keyboard
        )
    else:
        # –ë–æ–ª—å—à–µ –æ–¥–Ω–æ–π ‚Äî –≤—ã–±–æ—Ä –ø–æ–¥–ø–∏—Å–∫–∏
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=sub.get("email", f"–ü–æ–¥–ø–∏—Å–∫–∞ {i+1}"), callback_data=f"sub_{i}")]
            for i, sub in enumerate(subscriptions)
        ])
        await bot.send_message(
            chat_id=callback_query.message.chat.id,
            text="–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É:",
            reply_markup=keyboard
        )
    await state.set_state(SubscriptionStates.selecting_manual)
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –≤ inline
@router.callback_query(lambda c: c.data.startswith("sub_"), StateFilter(SubscriptionStates.selecting_manual))
async def process_inline_subscription(callback: CallbackQuery, bot: Bot, state: FSMContext):
    tg_id = callback.from_user.id
    sub_index = int(callback.data.split("_")[1])
    subscriptions = get_active_subscriptions(tg_id)
    sub_key = subscriptions[sub_index]["key"]

    await state.update_data(selected_sub=sub_key)
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=device["name"], callback_data=device["callback"])]
        for device in DEVICES
    ])
    await bot.edit_message_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:",
        chat_id=callback.message.chat.id,
        message_id=callback.message.message_id,
        reply_markup=keyboard
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤ inline
@router.callback_query(lambda c: c.data.startswith("setup_"), StateFilter(SubscriptionStates.selecting_manual))
async def send_manual(callback: CallbackQuery, bot: Bot, state: FSMContext):
    data = await state.get_data()
    sub_key = data.get("selected_sub")
    if not sub_key:
        await callback.message.answer("–û—à–∏–±–∫–∞: –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞.", reply_markup=get_main_menu_kb())
        await state.clear()
        return

    encoded_key = urllib.parse.quote(sub_key, safe="")
    redirect_link = f"{cfg.BASE_REDIRECT_URL}/?key={encoded_key}"
    device = next(d for d in DEVICES if d["callback"] == callback.data)

    print(redirect_link)

    manuals = {
        "setup_pc": f"{mt.manual_pc(x=sub_key)}",
        "setup_android": f"{mt.manual_android}",
        "setup_ios": f"{mt.manual_ios}",
        "setup_android_tv": f"{mt.manual_android_tv(x=sub_key)}"
    }
    manual_text = manuals.get(callback.data, "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì• –°–∫–∞—á–∞—Ç—å", url=device["download_url"])]
    ])
    if callback.data in ["setup_android", "setup_ios"]:
        keyboard.inline_keyboard.append([InlineKeyboardButton(text="üîó –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", url=redirect_link)])

    await bot.edit_message_text(
        text=manual_text,
        chat_id=callback.message.chat.id,
        message_id=callback.message.message_id,
        parse_mode="MARKDOWN",
        disable_web_page_preview=True,
        reply_markup=keyboard
    )
    await state.clear()
    await callback.answer()

@router.message(lambda message: message.text == "–û —Å–µ—Ä–≤–∏—Å–µ")
async def service_info(message: Message):
    info_text = (
        "<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–∏—Å–µ:</b>\n\n"
        "- WSocks VPN - —ç—Ç–æ —Å–µ—Ä–≤–∏—Å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—â–∏–π –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Å—ë—Ä—Ñ–∏–Ω–≥–∞ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ –ø–æ—Å—Ä–µ–¥—Å—Ç–≤–æ–º "
        "–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —É–¥–∞–ª—ë–Ω–Ω–æ–º—É —Å–µ—Ä–≤–µ—Ä—É –≤ –ì–µ—Ä–º–∞–Ω–∏–∏ (–≤ –±—É–¥—É—â–µ–º –∏ –≤ –¥—Ä—É–≥–∏—Ö —Å—Ç—Ä–∞–Ω–∞—Ö).\n\n"
        "- –ú—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º —Å–æ—Ö—Ä–∞–Ω–Ω–æ—Å—Ç—å –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –æ—Ç–≤–µ—á–∞–µ–º –∑–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –∏ —Å–∫–æ—Ä–æ—Å—Ç—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –Ω–∞—à–∏—Ö "
        "—É—Å–ª—É–≥.\n\n"
        "- WSocks VPN –Ω–µ –ø–æ–¥–≤–µ—Ä–∂–µ–Ω –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞–º, —Ç.–∫ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–∞–º—ã–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ç–æ–∫–æ–ª—ã TLS+Vless+TCP+Reality  –∏ "
        "–Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –æ–¥–Ω–æ–º—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é. –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è VPN —É—Å–ª—É–≥ –≤—ã –º–æ–∂–µ—Ç–µ —Å–∞–º–∏ –≤—ã–±—Ä–∞—Ç—å —É–¥–æ–±–Ω—É—é –≤–∞–º –ø—Ä–æ–≥—Ä–∞–º–º—É."
    )
    await message.reply(info_text, parse_mode="HTML", reply_markup=get_main_menu_kb())

@router.message(lambda message: message.text == "–û –ø–æ–¥–ø–∏—Å–∫–µ")
async def subscription_info(message: Message):
    support_text = (
        "<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ:</b>\n\n"
        "<b>üûÑ –°—Ç–æ–∏–º–æ—Å—Ç—å:</b> <i>89 —Ä—É–±–ª–µ–π/–º–µ—Å</i>\n\n"
        "<b>üûÑ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏:</b> <i>–Ω–µ—Ç</i>\n\n"
        "<b>üûÑ –õ–∏–º–∏—Ç —Ç—Ä–∞—Ñ–∏–∫–∞:</b> <i>–ë–µ–∑–ª–∏–º–∏—Ç</i>\n\n"
        "<b>üûÑ –ü—Ä–æ—Ç–æ–∫–æ–ª—ã:</b> <i>TLS+Vless+TCP+Reality</i>\n\n"
        "<b>üûÑ –ü—Ä–æ–≥—Ä–∞–º–º—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:</b> <i>Amnezia, NekoBox/NekoRay, Hiddify, V2RayNG –∏ —Ç.–ø</i>\n\n"
        "<b>üûÑ –ú–∞–∫—Å. –ö–æ–ª-–≤–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤:</b> <i>3 —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (Android TV, Android, IOS, MAC, Windows, Linux)</i>\n\n"
        "<b>!–í–ê–ñ–ù–û!</b>\n\n"
        "- –ï—Å–ª–∏ –≤—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –Ω–µ –æ—Ç–∫–ª—é—á–∞—Ç—å VPN –≤–æ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–≥—Ä (—Å–æ —Å—Ç–∏–º–∞ –∏–ª–∏ –¥—Ä—É–≥–∏—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤) –∏–ª–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è "
        "–±–æ–ª—å—à–∏—Ö –∏–ª–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –¢–æ—Ä—Ä–µ–Ω—Ç —Ñ–∞–π–ª–æ–≤ , –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–±–∞–≤—å—Ç–µ –∏—Ö –≤ –∏—Å–∫–ª—é—á–µ–Ω–∏—è, –∏–Ω–∞—á–µ —Å–∫–æ—Ä–æ—Å—Ç—å –≤–∞—à–µ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –±—É–¥–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ —Å–Ω–∏–∂–µ–Ω–∞!\n"
        "     - –ú–∞–Ω—É–∞–ª –ø–æ —ç—Ç–æ–º—É –¥–µ–π—Å—Ç–≤–∏—é –µ—Å—Ç—å –≤ –Ω–∞—à–µ–º –±–æ—Ç–µ!\n\n"
        "- –ï—Å–ª–∏ –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –∫—Ä—è–∫–Ω—É—Ç—ã–π —Å–æ—Ñ—Ç –ø—Ä–∏ –≤–∫–ª—é—á—ë–Ω–Ω–æ–º VPN, —Ç–æ –¥–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ –∏—Å–∫–ª—é—á–µ–Ω–∏—è. –ï—Å—Ç—å —Ä–∏—Å–∫, "
        "—á—Ç–æ –≤–∞–º –æ–≥—Ä–∞–Ω–∏—á–∞—Ç –¥–æ—Å—Ç—É–ø –∫ –µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –≤–≤–∏–¥—É –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤ –¥—Ä—É–≥–∏—Ö —Å—Ç—Ä–∞–Ω.\n"
        "     - –ú–∞–Ω—É–∞–ª –ø–æ —ç—Ç–æ–º—É –¥–µ–π—Å—Ç–≤–∏—é –µ—Å—Ç—å –≤ –Ω–∞—à–µ–º –±–æ—Ç–µ!"
    )
    await message.reply(support_text, parse_mode="HTML", reply_markup=get_main_menu_kb())

@router.message(lambda message: message.text == "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ")
async def user_agreement(message: Message):
    await message.reply(f"{mt.license_agreement_text}", parse_mode="HTML", reply_markup=get_main_menu_kb())

@router.message(lambda message: message.text == "–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏")
async def privacy_policy(message: Message):
    privacy_policy_text = (
        f"WSocks VPN –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç Telegram.\n"
        f"–ú—ã —É–≤–∞–∂–∞–µ–º –≤–∞—à—É –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å.\n\n"
        f"–ë–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ:"
    )
    await message.reply(privacy_policy_text, parse_mode="Markdown", reply_markup=get_privacy_kb())


@router.callback_query(lambda c: c.data == "info_subscription")
async def show_subscription_info(callback_query: CallbackQuery):
    support_text = (
        "<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ:</b>\n\n"
        "<b>- –°—Ç–æ–∏–º–æ—Å—Ç—å:</b> <i>89 —Ä—É–±–ª–µ–π/–º–µ—Å</i>\n\n"
        "<b>- –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏:</b> <i>–Ω–µ—Ç</i>\n\n"
        "<b>- –õ–∏–º–∏—Ç —Ç—Ä–∞—Ñ–∏–∫–∞:</b> <i>–ë–µ–∑–ª–∏–º–∏—Ç</i>\n\n"
        "<b>- –ü—Ä–æ—Ç–æ–∫–æ–ª—ã:</b> <i>TLS+Vless+TCP+Reality</i>\n\n"
        "<b>- –ü—Ä–æ–≥—Ä–∞–º–º—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:</b> <i>Amnezia, NekoBox/NekoRay, Hiddify, V2RayNG –∏ —Ç.–ø</i>\n\n"
        "<b>- –ú–∞–∫—Å. –ö–æ–ª-–≤–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤:</b> <i>3 —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (Android TV, Android, IOS, MAC, Windows, Linux)</i>\n\n"
        "<b>!–í–ê–ñ–ù–û!</b>\n\n"
        "- –ï—Å–ª–∏ –≤—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –Ω–µ –æ—Ç–∫–ª—é—á–∞—Ç—å VPN –≤–æ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–≥—Ä (—Å–æ —Å—Ç–∏–º–∞ –∏–ª–∏ –¥—Ä—É–≥–∏—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤) –∏–ª–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è "
        "–±–æ–ª—å—à–∏—Ö –∏–ª–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –¢–æ—Ä—Ä–µ–Ω—Ç —Ñ–∞–π–ª–æ–≤ , –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–±–∞–≤—å—Ç–µ –∏—Ö –≤ –∏—Å–∫–ª—é—á–µ–Ω–∏—è, –∏–Ω–∞—á–µ —Å–∫–æ—Ä–æ—Å—Ç—å –≤–∞—à–µ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –±—É–¥–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ —Å–Ω–∏–∂–µ–Ω–∞!\n"
        "     - –ú–∞–Ω—É–∞–ª –ø–æ —ç—Ç–æ–º—É –¥–µ–π—Å—Ç–≤–∏—é –µ—Å—Ç—å –≤ –Ω–∞—à–µ–º –±–æ—Ç–µ!\n\n"
        "- –ï—Å–ª–∏ –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –∫—Ä—è–∫–Ω—É—Ç—ã–π —Å–æ—Ñ—Ç –ø—Ä–∏ –≤–∫–ª—é—á—ë–Ω–Ω–æ–º VPN, —Ç–æ –¥–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ –∏—Å–∫–ª—é—á–µ–Ω–∏—è. –ï—Å—Ç—å —Ä–∏—Å–∫, "
        "—á—Ç–æ –≤–∞–º –æ–≥—Ä–∞–Ω–∏—á–∞—Ç –¥–æ—Å—Ç—É–ø –∫ –µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –≤–≤–∏–¥—É –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤ –¥—Ä—É–≥–∏—Ö —Å—Ç—Ä–∞–Ω.\n"
        "     - –ú–∞–Ω—É–∞–ª –ø–æ —ç—Ç–æ–º—É –¥–µ–π—Å—Ç–≤–∏—é –µ—Å—Ç—å –≤ –Ω–∞—à–µ–º –±–æ—Ç–µ!"
    )
    await callback_query.message.answer(support_text, parse_mode="HTML", reply_markup=get_main_menu_kb())

@router.callback_query(lambda c: c.data == "info_service")
async def show_service_info(callback_query: CallbackQuery):
    info_text = (
        "<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–∏—Å–µ:</b>\n\n"
        "- WSocks VPN - —ç—Ç–æ —Å–µ—Ä–≤–∏—Å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—â–∏–π –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Å—ë—Ä—Ñ–∏–Ω–≥–∞ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ –ø–æ—Å—Ä–µ–¥—Å—Ç–≤–æ–º "
        "–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —É–¥–∞–ª—ë–Ω–Ω–æ–º—É —Å–µ—Ä–≤–µ—Ä—É –≤ –ì–µ—Ä–º–∞–Ω–∏–∏ (–≤ –±—É–¥—É—â–µ–º –∏ –≤ –¥—Ä—É–≥–∏—Ö —Å—Ç—Ä–∞–Ω–∞—Ö).\n\n"
        "- –ú—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º —Å–æ—Ö—Ä–∞–Ω–Ω–æ—Å—Ç—å –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –æ—Ç–≤–µ—á–∞–µ–º –∑–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –∏ —Å–∫–æ—Ä–æ—Å—Ç—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –Ω–∞—à–∏—Ö "
        "—É—Å–ª—É–≥.\n\n"
        "- WSocks VPN –Ω–µ –ø–æ–¥–≤–µ—Ä–∂–µ–Ω –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞–º, —Ç.–∫ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–∞–º—ã–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ç–æ–∫–æ–ª—ã TLS+Vless+TCP+Reality  –∏ "
        "–Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –æ–¥–Ω–æ–º—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é. –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è VPN —É—Å–ª—É–≥ –≤—ã –º–æ–∂–µ—Ç–µ —Å–∞–º–∏ –≤—ã–±—Ä–∞—Ç—å —É–¥–æ–±–Ω—É—é –≤–∞–º –ø—Ä–æ–≥—Ä–∞–º–º—É."
    )
    await callback_query.message.reply(info_text, parse_mode="HTML", reply_markup=get_main_menu_kb())


@router.callback_query(lambda c: c.data == "info_terms")
async def show_terms(callback_query: CallbackQuery):
    await callback_query.message.reply(f"{mt.license_agreement_text}", parse_mode="HTML", reply_markup=get_main_menu_kb())


@router.callback_query(lambda c: c.data == "info_privacy")
async def show_privacy(callback_query: CallbackQuery):
    privacy_policy_text = (
        f"WSocks VPN –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç Telegram.\n"
        f"–ú—ã —É–≤–∞–∂–∞–µ–º –≤–∞—à—É –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å.\n\n"
        f"–ë–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ:"
    )
    await callback_query.message.reply(privacy_policy_text, parse_mode="Markdown", reply_markup=get_privacy_kb())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ "–ù–∞–∑–∞–¥" –≤ –æ–±—ã—á–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ
@router.message(lambda message: message.text == "–ù–∞–∑–∞–¥", StateFilter(SubscriptionStates.selecting_manual))
async def cancel_manual(message: Message, state: FSMContext):
    await message.reply("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=get_main_menu_kb())
    await state.clear()

@router.message()
async def handle_random_text(message: Message):
    await message.answer("–Ø –Ω–µ –ø–æ–Ω—è–ª –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.", reply_markup=get_main_menu_kb())
